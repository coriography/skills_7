Discussion
----------

1. Which would be the most efficient data structure for a data set with the
   following requirements:

  - frequently removing and adding items to the beginning of the data structure

  - frequently removing and adding items to the end of the data structure

  - rarely indexing and searching

  A. A Python list B. Singly linked list C. Doubly linked list

  Explain your answer.

a singly-linked list, because you can add and remove from the beginning and end using "head" and "tail," but don't need to access the middle nodes






2. Which would be the most efficient data structure for a data set with the
   following requirements:

  - order is unimportant

  -frequently adding and removing items

  - frequently looking up items

  A. A Python list  B. A Dictionary  C. Deque  D. Binary Search Tree

  Explain your answer.

a dictionary because it's unordered, easy to add and remove items, and the fastest at looking up items by key






3. Explain why looking up, adding elements, and removing elements from a 
   dictionary or hash map are all O(1) operations.


because the hash or key are unique, you can go straight to the element you're looking up, and because they're unordered, you don't have to shift anything when you add or remove an element



4. Explain why removing elements from or adding elements to an arbitrary
   location in a Python list are O(n) operations.


because a Python list is indexed, each item is at an equally-spaced place in memory, so when one item is added or removed, everything after it shifts.




5. What is the correct runtime for:

  - Bubble Sort? - O(n^2)/quadratic

  - Quicksort? conflicting information in the notes, but I think best case is O(n log n) and worst case is O(n^2)

  - Merge Sort? O(n log n)

  - Insertion Sort? O(n^2) but faster (O(n)) when data is already almost sorted


6. What is the difference between a tree and a graph?


graphs aren't hierarchical, can be cyclical, and can be undirected, whereas trees are hierarchical, acyclical, and directed


7. Using the Python implementation of Quicksort from the instructions:

  Given the list [8, 4, 1, 6, 5, 2, 7, 3]:
  When this function is initially called, what are the values of:

    - lst - []

    - pivot - 5

    - lo - [4, 1, 2, 3]

    - hi - [8, 6, 7]



  When the quicksort is first called recursively on the `lo` list, what are the
  values of:

  - lst - []

  - pivot - 2

  - lo - [1]

  - hi - [4, 3]
